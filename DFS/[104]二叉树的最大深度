二叉树的最大深度
Category	Difficulty	Likes	Dislikes
algorithms	Easy (71.50%)	408	-
Tags
Companies
给定一个二叉树，找出其最大深度。

二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。

说明: 叶子节点是指没有子节点的节点。

示例：
给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int ans=0;
    int max_height=0;
    void dfs(TreeNode* root)
    {
        if(root->left==NULL)
        {
            ans++;
            return;
        }
            
        else
            {
                dfs(root->left);
                ans++;
            }

        if(root->right==NULL)
            {
                ans++;
                return;
            }
        else
            {
                dfs(root->right);
                ans++;
            }
    }
    void dfs1(TreeNode* root,int height)
    {
        if(root->left==NULL&&root->right==NULL)
        {
            if(max_height<height)
                max_height = height;
            return;
        }
        if(root->left!=NULL)
            dfs1(root->left,height+1);
        if(root->right!=NULL)
            dfs1(root->right,height+1);
        
    }

    int maxDepth1(TreeNode* root) {
        if(root == NULL)
            return 0;
        dfs1(root,1);
        //cout<<max_height;
        //int result = log(ans)/log(2)+1;
        return max_height;
    }
    int maxDepth(TreeNode* root)
    {
        if(root == NULL)
            return 0;
        else
        {
            int left_height = maxDepth(root->left);
            int right_height = maxDepth(root->right);
            return max(left_height,right_height)+1;
        }
    }
};
