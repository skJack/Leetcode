/*
Category Difficulty Likes Dislikes
algorithms Medium (69.05%) 210 -
Tags
Companies
给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。

示例 :

输入: [1,2,1,3,2,5]
输出: [3,5]
注意：

结果输出的顺序并不重要，对于上面的例子， [5, 3] 也是正确答案。
你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？
Discussion | Solution
*/

// @lc code=start
class Solution {
public:
//首先知道用异或可以在on时间内求出唯一的数字
//其次知道我们只要将两个单独的数字分成两组，每一组单独异或即可
//分组条件可以用他们不同的某一位

//s是只出现一次的2个数字的^ 记做数字a,b
        //既然a,b 不一样，那么s肯定不是0，那么s的二进制肯定至少有1位（第n位）是1，只有0^1才等于1
        //所以a,b 在第n位，要么a是0，b是1 ，要么b是0，a是1    ---->A
        //s = 3 ^ 5; 0x0011 ^ 0x0101 = 0x0110 = 6
        //假设int是8位
        //-6  原码1000 0110
        //    反码1111 1001
        //    补码1111 1010
        //s & (-s)
        //  0000 0110
        //& 1111 1010
        //  0000 0010
        //所以k = s & (-s) 就是保留s的最后一个1，并且将其他位变为0  也就是s最后一个1是倒数第二位   --->B
        //由于s & (-s)很方便找到一个1 所以用他了，其实找到任何一个1都可以
        //根据A和B  我们可以确定 3 和 5 必定可以分到 不同的组里
        //同理 1和1 由于二进制完全相同，所有必定分到相同的组里


    vector<int> singleNumber(vector<int>& nums) {
        int s = 0;
        for(int num:nums)
        {
            s^=num;//先异或，最后s的值就是两个不同数字的异或
        }
        int k = s&-s;//保留s的最后一个1
        vector<int> rs(2,0);
        for(int num:nums)
        {
            if(num&k)
            {
                //第一组
                rs[0]^=num;
            }
            else
            {
                rs[1]^=num;
            }
            
        }
        return rs;
    }
};
